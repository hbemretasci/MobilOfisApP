// Generated by Dagger (https://dagger.dev).
package com.codmine.mukellef.presentation.login_screen;

import com.codmine.mukellef.domain.use_case.login_screen.AddOrUpdateUser;
import com.codmine.mukellef.domain.use_case.login_screen.GetOnesignalPlayerId;
import com.codmine.mukellef.domain.use_case.login_screen.GetTaxPayer;
import com.codmine.mukellef.domain.use_case.login_screen.LogInWithEmailAndPassword;
import com.codmine.mukellef.domain.use_case.login_screen.SetOnesignalExternalId;
import com.codmine.mukellef.domain.use_case.login_screen.SetUserLoginData;
import com.codmine.mukellef.domain.use_case.login_screen.ValidateGib;
import com.codmine.mukellef.domain.use_case.login_screen.ValidatePassword;
import com.codmine.mukellef.domain.use_case.login_screen.ValidateVk;
import com.codmine.mukellef.domain.use_case.main.LogOut;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginViewModel_Factory implements Factory<LoginViewModel> {
  private final Provider<ValidateGib> validateGibProvider;

  private final Provider<ValidateVk> validateVkProvider;

  private final Provider<ValidatePassword> validatePasswordProvider;

  private final Provider<GetTaxPayer> getTaxPayerProvider;

  private final Provider<SetUserLoginData> setUserLoginDataProvider;

  private final Provider<LogInWithEmailAndPassword> logInProvider;

  private final Provider<LogOut> logOutProvider;

  private final Provider<SetOnesignalExternalId> setOnesignalExternalIdProvider;

  private final Provider<GetOnesignalPlayerId> getOnesignalPlayerIdProvider;

  private final Provider<AddOrUpdateUser> addOrUpdateUserProvider;

  public LoginViewModel_Factory(Provider<ValidateGib> validateGibProvider,
      Provider<ValidateVk> validateVkProvider, Provider<ValidatePassword> validatePasswordProvider,
      Provider<GetTaxPayer> getTaxPayerProvider,
      Provider<SetUserLoginData> setUserLoginDataProvider,
      Provider<LogInWithEmailAndPassword> logInProvider, Provider<LogOut> logOutProvider,
      Provider<SetOnesignalExternalId> setOnesignalExternalIdProvider,
      Provider<GetOnesignalPlayerId> getOnesignalPlayerIdProvider,
      Provider<AddOrUpdateUser> addOrUpdateUserProvider) {
    this.validateGibProvider = validateGibProvider;
    this.validateVkProvider = validateVkProvider;
    this.validatePasswordProvider = validatePasswordProvider;
    this.getTaxPayerProvider = getTaxPayerProvider;
    this.setUserLoginDataProvider = setUserLoginDataProvider;
    this.logInProvider = logInProvider;
    this.logOutProvider = logOutProvider;
    this.setOnesignalExternalIdProvider = setOnesignalExternalIdProvider;
    this.getOnesignalPlayerIdProvider = getOnesignalPlayerIdProvider;
    this.addOrUpdateUserProvider = addOrUpdateUserProvider;
  }

  @Override
  public LoginViewModel get() {
    return newInstance(validateGibProvider.get(), validateVkProvider.get(), validatePasswordProvider.get(), getTaxPayerProvider.get(), setUserLoginDataProvider.get(), logInProvider.get(), logOutProvider.get(), setOnesignalExternalIdProvider.get(), getOnesignalPlayerIdProvider.get(), addOrUpdateUserProvider.get());
  }

  public static LoginViewModel_Factory create(Provider<ValidateGib> validateGibProvider,
      Provider<ValidateVk> validateVkProvider, Provider<ValidatePassword> validatePasswordProvider,
      Provider<GetTaxPayer> getTaxPayerProvider,
      Provider<SetUserLoginData> setUserLoginDataProvider,
      Provider<LogInWithEmailAndPassword> logInProvider, Provider<LogOut> logOutProvider,
      Provider<SetOnesignalExternalId> setOnesignalExternalIdProvider,
      Provider<GetOnesignalPlayerId> getOnesignalPlayerIdProvider,
      Provider<AddOrUpdateUser> addOrUpdateUserProvider) {
    return new LoginViewModel_Factory(validateGibProvider, validateVkProvider, validatePasswordProvider, getTaxPayerProvider, setUserLoginDataProvider, logInProvider, logOutProvider, setOnesignalExternalIdProvider, getOnesignalPlayerIdProvider, addOrUpdateUserProvider);
  }

  public static LoginViewModel newInstance(ValidateGib validateGib, ValidateVk validateVk,
      ValidatePassword validatePassword, GetTaxPayer getTaxPayer, SetUserLoginData setUserLoginData,
      LogInWithEmailAndPassword logIn, LogOut logOut, SetOnesignalExternalId setOnesignalExternalId,
      GetOnesignalPlayerId getOnesignalPlayerId, AddOrUpdateUser addOrUpdateUser) {
    return new LoginViewModel(validateGib, validateVk, validatePassword, getTaxPayer, setUserLoginData, logIn, logOut, setOnesignalExternalId, getOnesignalPlayerId, addOrUpdateUser);
  }
}
